//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Mariana Artavia Vene/Documents/I SEMESTRE 2023/Compiladores e Interpretes/ConsoleCompi/ConsoleCompi/src\MiniCSharpParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace gen {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMiniCSharpParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class MiniCSharpParserBaseListener : IMiniCSharpParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] MiniCSharpParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] MiniCSharpParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.using"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUsing([NotNull] MiniCSharpParser.UsingContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.using"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUsing([NotNull] MiniCSharpParser.UsingContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.varDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVarDecl([NotNull] MiniCSharpParser.VarDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.varDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVarDecl([NotNull] MiniCSharpParser.VarDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.classDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassDecl([NotNull] MiniCSharpParser.ClassDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.classDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassDecl([NotNull] MiniCSharpParser.ClassDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.methodDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodDecl([NotNull] MiniCSharpParser.MethodDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.methodDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodDecl([NotNull] MiniCSharpParser.MethodDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.formPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormPars([NotNull] MiniCSharpParser.FormParsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.formPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormPars([NotNull] MiniCSharpParser.FormParsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] MiniCSharpParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] MiniCSharpParser.TypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] MiniCSharpParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] MiniCSharpParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] MiniCSharpParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] MiniCSharpParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.actPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterActPars([NotNull] MiniCSharpParser.ActParsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.actPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitActPars([NotNull] MiniCSharpParser.ActParsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondition([NotNull] MiniCSharpParser.ConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondition([NotNull] MiniCSharpParser.ConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.condTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondTerm([NotNull] MiniCSharpParser.CondTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.condTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondTerm([NotNull] MiniCSharpParser.CondTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.condFact"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondFact([NotNull] MiniCSharpParser.CondFactContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.condFact"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondFact([NotNull] MiniCSharpParser.CondFactContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.cast"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCast([NotNull] MiniCSharpParser.CastContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.cast"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCast([NotNull] MiniCSharpParser.CastContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr([NotNull] MiniCSharpParser.ExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr([NotNull] MiniCSharpParser.ExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerm([NotNull] MiniCSharpParser.TermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerm([NotNull] MiniCSharpParser.TermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactor([NotNull] MiniCSharpParser.FactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactor([NotNull] MiniCSharpParser.FactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.designator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDesignator([NotNull] MiniCSharpParser.DesignatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.designator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDesignator([NotNull] MiniCSharpParser.DesignatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.relOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelOp([NotNull] MiniCSharpParser.RelOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.relOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelOp([NotNull] MiniCSharpParser.RelOpContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace gen

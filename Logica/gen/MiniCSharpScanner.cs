//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Mariana Artavia Vene/Documents/I SEMESTRE 2023/Compiladores e Interpretes/ConsoleCompi/ConsoleCompi/src\MiniCSharpScanner.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace gen {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MiniCSharpScanner : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Id=1, Bool=2, Integer=3, Double=4, String=5, CharConst=6, EscapeSequence=7, 
		Assign=8, And=9, Or=10, Plus=11, Minus=12, Plusplus=13, Minusminus=14, 
		Mult=15, Div=16, Mod=17, Equals=18, NotEquals=19, LessThan=20, GreaterThan=21, 
		LessOrEquals=22, GreateOrEquals=23, Dot=24, Semicolon=25, Comma=26, LeftParen=27, 
		RightParen=28, LeftBrack=29, RightBrack=30, LeftSBrack=31, RightSBrack=32, 
		Let=33, Add=34, Len=35, Class=36, Using=37, Void=38, If=39, Else=40, While=41, 
		For=42, Break=43, Return=44, Read=45, Write=46, COMMENT=47, WS=48;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Letter", "Digit", "Id", "Bool", "Integer", "Double", "String", "CharConst", 
		"EscapeSequence", "Assign", "And", "Or", "Plus", "Minus", "Plusplus", 
		"Minusminus", "Mult", "Div", "Mod", "Equals", "NotEquals", "LessThan", 
		"GreaterThan", "LessOrEquals", "GreateOrEquals", "Dot", "Semicolon", "Comma", 
		"LeftParen", "RightParen", "LeftBrack", "RightBrack", "LeftSBrack", "RightSBrack", 
		"Let", "Add", "Len", "Class", "Using", "Void", "If", "Else", "While", 
		"For", "Break", "Return", "Read", "Write", "COMMENT", "WS"
	};


	public MiniCSharpScanner(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniCSharpScanner(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'='", "'&&'", "'||'", 
		"'+'", "'-'", "'++'", "'--'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", 
		"'>'", "'<='", "'>='", "'.'", "';'", "','", "'('", "')'", "'{'", "'}'", 
		"'['", "']'", "'let'", "'add'", "'len'", "'class'", "'using'", "'void'", 
		"'if'", "'else'", "'while'", "'for'", "'break'", "'return'", "'read'", 
		"'write'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Id", "Bool", "Integer", "Double", "String", "CharConst", "EscapeSequence", 
		"Assign", "And", "Or", "Plus", "Minus", "Plusplus", "Minusminus", "Mult", 
		"Div", "Mod", "Equals", "NotEquals", "LessThan", "GreaterThan", "LessOrEquals", 
		"GreateOrEquals", "Dot", "Semicolon", "Comma", "LeftParen", "RightParen", 
		"LeftBrack", "RightBrack", "LeftSBrack", "RightSBrack", "Let", "Add", 
		"Len", "Class", "Using", "Void", "If", "Else", "While", "For", "Break", 
		"Return", "Read", "Write", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpScanner.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSharpScanner() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,48,322,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,1,0,1,0,1,1,1,1,1,2,1,2,1,2,5,2,109,8,2,10,2,12,2,112,9,2,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,123,8,3,1,4,4,4,126,8,4,11,4,12,4,127,
		1,5,4,5,131,8,5,11,5,12,5,132,1,5,1,5,5,5,137,8,5,10,5,12,5,140,9,5,3,
		5,142,8,5,1,5,1,5,3,5,146,8,5,1,5,4,5,149,8,5,11,5,12,5,150,3,5,153,8,
		5,1,6,1,6,1,6,1,6,5,6,159,8,6,10,6,12,6,162,9,6,1,6,1,6,1,7,1,7,1,7,3,
		7,169,8,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,
		12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,
		18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
		23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,
		30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,
		35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,
		38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,
		41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,
		44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,
		46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,5,48,309,
		8,48,10,48,12,48,312,9,48,1,48,1,48,1,49,4,49,317,8,49,11,49,12,49,318,
		1,49,1,49,0,0,50,1,0,3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,
		10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,
		22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,
		34,73,35,75,36,77,37,79,38,81,39,83,40,85,41,87,42,89,43,91,44,93,45,95,
		46,97,47,99,48,1,0,9,3,0,65,90,95,95,97,122,1,0,48,57,2,0,69,69,101,101,
		2,0,43,43,45,45,4,0,10,10,13,13,34,34,92,92,2,0,39,39,92,92,8,0,34,34,
		39,39,92,92,98,98,102,102,110,110,114,114,116,116,2,0,10,10,13,13,3,0,
		9,10,13,13,32,32,334,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
		0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
		1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
		0,1,101,1,0,0,0,3,103,1,0,0,0,5,105,1,0,0,0,7,122,1,0,0,0,9,125,1,0,0,
		0,11,130,1,0,0,0,13,154,1,0,0,0,15,165,1,0,0,0,17,172,1,0,0,0,19,175,1,
		0,0,0,21,177,1,0,0,0,23,180,1,0,0,0,25,183,1,0,0,0,27,185,1,0,0,0,29,187,
		1,0,0,0,31,190,1,0,0,0,33,193,1,0,0,0,35,195,1,0,0,0,37,197,1,0,0,0,39,
		199,1,0,0,0,41,202,1,0,0,0,43,205,1,0,0,0,45,207,1,0,0,0,47,209,1,0,0,
		0,49,212,1,0,0,0,51,215,1,0,0,0,53,217,1,0,0,0,55,219,1,0,0,0,57,221,1,
		0,0,0,59,223,1,0,0,0,61,225,1,0,0,0,63,227,1,0,0,0,65,229,1,0,0,0,67,231,
		1,0,0,0,69,233,1,0,0,0,71,237,1,0,0,0,73,241,1,0,0,0,75,245,1,0,0,0,77,
		251,1,0,0,0,79,257,1,0,0,0,81,262,1,0,0,0,83,265,1,0,0,0,85,270,1,0,0,
		0,87,276,1,0,0,0,89,280,1,0,0,0,91,286,1,0,0,0,93,293,1,0,0,0,95,298,1,
		0,0,0,97,304,1,0,0,0,99,316,1,0,0,0,101,102,7,0,0,0,102,2,1,0,0,0,103,
		104,7,1,0,0,104,4,1,0,0,0,105,110,3,1,0,0,106,109,3,1,0,0,107,109,3,3,
		1,0,108,106,1,0,0,0,108,107,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,
		111,1,0,0,0,111,6,1,0,0,0,112,110,1,0,0,0,113,114,5,116,0,0,114,115,5,
		114,0,0,115,116,5,117,0,0,116,123,5,101,0,0,117,118,5,102,0,0,118,119,
		5,97,0,0,119,120,5,108,0,0,120,121,5,115,0,0,121,123,5,101,0,0,122,113,
		1,0,0,0,122,117,1,0,0,0,123,8,1,0,0,0,124,126,3,3,1,0,125,124,1,0,0,0,
		126,127,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,10,1,0,0,0,129,131,
		7,1,0,0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,
		0,133,141,1,0,0,0,134,138,5,46,0,0,135,137,7,1,0,0,136,135,1,0,0,0,137,
		140,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,142,1,0,0,0,140,138,1,
		0,0,0,141,134,1,0,0,0,141,142,1,0,0,0,142,152,1,0,0,0,143,145,7,2,0,0,
		144,146,7,3,0,0,145,144,1,0,0,0,145,146,1,0,0,0,146,148,1,0,0,0,147,149,
		7,1,0,0,148,147,1,0,0,0,149,150,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,
		0,151,153,1,0,0,0,152,143,1,0,0,0,152,153,1,0,0,0,153,12,1,0,0,0,154,160,
		5,34,0,0,155,159,8,4,0,0,156,157,5,92,0,0,157,159,9,0,0,0,158,155,1,0,
		0,0,158,156,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,
		163,1,0,0,0,162,160,1,0,0,0,163,164,5,34,0,0,164,14,1,0,0,0,165,168,5,
		39,0,0,166,169,3,17,8,0,167,169,8,5,0,0,168,166,1,0,0,0,168,167,1,0,0,
		0,169,170,1,0,0,0,170,171,5,39,0,0,171,16,1,0,0,0,172,173,5,92,0,0,173,
		174,7,6,0,0,174,18,1,0,0,0,175,176,5,61,0,0,176,20,1,0,0,0,177,178,5,38,
		0,0,178,179,5,38,0,0,179,22,1,0,0,0,180,181,5,124,0,0,181,182,5,124,0,
		0,182,24,1,0,0,0,183,184,5,43,0,0,184,26,1,0,0,0,185,186,5,45,0,0,186,
		28,1,0,0,0,187,188,5,43,0,0,188,189,5,43,0,0,189,30,1,0,0,0,190,191,5,
		45,0,0,191,192,5,45,0,0,192,32,1,0,0,0,193,194,5,42,0,0,194,34,1,0,0,0,
		195,196,5,47,0,0,196,36,1,0,0,0,197,198,5,37,0,0,198,38,1,0,0,0,199,200,
		5,61,0,0,200,201,5,61,0,0,201,40,1,0,0,0,202,203,5,33,0,0,203,204,5,61,
		0,0,204,42,1,0,0,0,205,206,5,60,0,0,206,44,1,0,0,0,207,208,5,62,0,0,208,
		46,1,0,0,0,209,210,5,60,0,0,210,211,5,61,0,0,211,48,1,0,0,0,212,213,5,
		62,0,0,213,214,5,61,0,0,214,50,1,0,0,0,215,216,5,46,0,0,216,52,1,0,0,0,
		217,218,5,59,0,0,218,54,1,0,0,0,219,220,5,44,0,0,220,56,1,0,0,0,221,222,
		5,40,0,0,222,58,1,0,0,0,223,224,5,41,0,0,224,60,1,0,0,0,225,226,5,123,
		0,0,226,62,1,0,0,0,227,228,5,125,0,0,228,64,1,0,0,0,229,230,5,91,0,0,230,
		66,1,0,0,0,231,232,5,93,0,0,232,68,1,0,0,0,233,234,5,108,0,0,234,235,5,
		101,0,0,235,236,5,116,0,0,236,70,1,0,0,0,237,238,5,97,0,0,238,239,5,100,
		0,0,239,240,5,100,0,0,240,72,1,0,0,0,241,242,5,108,0,0,242,243,5,101,0,
		0,243,244,5,110,0,0,244,74,1,0,0,0,245,246,5,99,0,0,246,247,5,108,0,0,
		247,248,5,97,0,0,248,249,5,115,0,0,249,250,5,115,0,0,250,76,1,0,0,0,251,
		252,5,117,0,0,252,253,5,115,0,0,253,254,5,105,0,0,254,255,5,110,0,0,255,
		256,5,103,0,0,256,78,1,0,0,0,257,258,5,118,0,0,258,259,5,111,0,0,259,260,
		5,105,0,0,260,261,5,100,0,0,261,80,1,0,0,0,262,263,5,105,0,0,263,264,5,
		102,0,0,264,82,1,0,0,0,265,266,5,101,0,0,266,267,5,108,0,0,267,268,5,115,
		0,0,268,269,5,101,0,0,269,84,1,0,0,0,270,271,5,119,0,0,271,272,5,104,0,
		0,272,273,5,105,0,0,273,274,5,108,0,0,274,275,5,101,0,0,275,86,1,0,0,0,
		276,277,5,102,0,0,277,278,5,111,0,0,278,279,5,114,0,0,279,88,1,0,0,0,280,
		281,5,98,0,0,281,282,5,114,0,0,282,283,5,101,0,0,283,284,5,97,0,0,284,
		285,5,107,0,0,285,90,1,0,0,0,286,287,5,114,0,0,287,288,5,101,0,0,288,289,
		5,116,0,0,289,290,5,117,0,0,290,291,5,114,0,0,291,292,5,110,0,0,292,92,
		1,0,0,0,293,294,5,114,0,0,294,295,5,101,0,0,295,296,5,97,0,0,296,297,5,
		100,0,0,297,94,1,0,0,0,298,299,5,119,0,0,299,300,5,114,0,0,300,301,5,105,
		0,0,301,302,5,116,0,0,302,303,5,101,0,0,303,96,1,0,0,0,304,305,5,47,0,
		0,305,306,5,47,0,0,306,310,1,0,0,0,307,309,8,7,0,0,308,307,1,0,0,0,309,
		312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,313,1,0,0,0,312,310,1,
		0,0,0,313,314,6,48,0,0,314,98,1,0,0,0,315,317,7,8,0,0,316,315,1,0,0,0,
		317,318,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,320,1,0,0,0,320,321,
		6,49,0,0,321,100,1,0,0,0,16,0,108,110,122,127,132,138,141,145,150,152,
		158,160,168,310,318,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace gen

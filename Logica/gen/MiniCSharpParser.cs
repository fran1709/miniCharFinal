//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Mariana Artavia Vene/Documents/I SEMESTRE 2023/Compiladores e Interpretes/ConsoleCompi/ConsoleCompi/src\MiniCSharpParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace gen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MiniCSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Id=1, Bool=2, Integer=3, Double=4, String=5, CharConst=6, EscapeSequence=7, 
		Assign=8, And=9, Or=10, Plus=11, Minus=12, Plusplus=13, Minusminus=14, 
		Mult=15, Div=16, Mod=17, Equals=18, NotEquals=19, LessThan=20, GreaterThan=21, 
		LessOrEquals=22, GreateOrEquals=23, Dot=24, Semicolon=25, Comma=26, LeftParen=27, 
		RightParen=28, LeftBrack=29, RightBrack=30, LeftSBrack=31, RightSBrack=32, 
		Let=33, Add=34, Len=35, Class=36, Using=37, Void=38, If=39, Else=40, While=41, 
		For=42, Break=43, Return=44, Read=45, Write=46, COMMENT=47, WS=48, Number=49, 
		StringConst=50, New=51;
	public const int
		RULE_program = 0, RULE_using = 1, RULE_varDecl = 2, RULE_classDecl = 3, 
		RULE_methodDecl = 4, RULE_formPars = 5, RULE_type = 6, RULE_statement = 7, 
		RULE_block = 8, RULE_actPars = 9, RULE_condition = 10, RULE_condTerm = 11, 
		RULE_condFact = 12, RULE_cast = 13, RULE_expr = 14, RULE_term = 15, RULE_factor = 16, 
		RULE_designator = 17, RULE_relOp = 18;
	public static readonly string[] ruleNames = {
		"program", "using", "varDecl", "classDecl", "methodDecl", "formPars", 
		"type", "statement", "block", "actPars", "condition", "condTerm", "condFact", 
		"cast", "expr", "term", "factor", "designator", "relOp"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'='", "'&&'", "'||'", 
		"'+'", "'-'", "'++'", "'--'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", 
		"'>'", "'<='", "'>='", "'.'", "';'", "','", "'('", "')'", "'{'", "'}'", 
		"'['", "']'", "'let'", "'add'", "'len'", "'class'", "'using'", "'void'", 
		"'if'", "'else'", "'while'", "'for'", "'break'", "'return'", "'read'", 
		"'write'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Id", "Bool", "Integer", "Double", "String", "CharConst", "EscapeSequence", 
		"Assign", "And", "Or", "Plus", "Minus", "Plusplus", "Minusminus", "Mult", 
		"Div", "Mod", "Equals", "NotEquals", "LessThan", "GreaterThan", "LessOrEquals", 
		"GreateOrEquals", "Dot", "Semicolon", "Comma", "LeftParen", "RightParen", 
		"LeftBrack", "RightBrack", "LeftSBrack", "RightSBrack", "Let", "Add", 
		"Len", "Class", "Using", "Void", "If", "Else", "While", "For", "Break", 
		"Return", "Read", "Write", "COMMENT", "WS", "Number", "StringConst", "New"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MiniCSharpParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(MiniCSharpParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrack() { return GetToken(MiniCSharpParser.LeftBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrack() { return GetToken(MiniCSharpParser.RightBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniCSharpParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext[] @using() {
			return GetRuleContexts<UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext @using(int i) {
			return GetRuleContext<UsingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Using) {
				{
				{
				State = 38;
				@using();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 44;
			Match(Class);
			State = 45;
			Match(Id);
			State = 46;
			Match(LeftBrack);
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 343597383682L) != 0) {
				{
				State = 50;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 47;
					varDecl();
					}
					break;
				case 2:
					{
					State = 48;
					classDecl();
					}
					break;
				case 3:
					{
					State = 49;
					methodDecl();
					}
					break;
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 55;
			Match(RightBrack);
			State = 56;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(MiniCSharpParser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(MiniCSharpParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCSharpParser.Semicolon, 0); }
		public UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingContext @using() {
		UsingContext _localctx = new UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(Using);
			State = 59;
			Match(Id);
			State = 60;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(MiniCSharpParser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(MiniCSharpParser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(MiniCSharpParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCSharpParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCSharpParser.Comma, i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			type();
			State = 63;
			Match(Id);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 64;
				Match(Comma);
				State = 65;
				Match(Id);
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(MiniCSharpParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(MiniCSharpParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrack() { return GetToken(MiniCSharpParser.LeftBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrack() { return GetToken(MiniCSharpParser.RightBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(Class);
			State = 74;
			Match(Id);
			State = 75;
			Match(LeftBrack);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Id) {
				{
				{
				State = 76;
				varDecl();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82;
			Match(RightBrack);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(MiniCSharpParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(MiniCSharpParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(MiniCSharpParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(MiniCSharpParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Id:
				{
				State = 84;
				type();
				}
				break;
			case Void:
				{
				State = 85;
				Match(Void);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 88;
			Match(Id);
			State = 89;
			Match(LeftParen);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Id) {
				{
				State = 90;
				formPars();
				}
			}

			State = 93;
			Match(RightParen);
			State = 94;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(MiniCSharpParser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(MiniCSharpParser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCSharpParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCSharpParser.Comma, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterFormPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitFormPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 10, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			type();
			State = 97;
			Match(Id);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 98;
				Match(Comma);
				State = 99;
				type();
				State = 100;
				Match(Id);
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(MiniCSharpParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSBrack() { return GetToken(MiniCSharpParser.LeftSBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSBrack() { return GetToken(MiniCSharpParser.RightSBrack, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(Id);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftSBrack) {
				{
				State = 108;
				Match(LeftSBrack);
				State = 109;
				Match(RightSBrack);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(MiniCSharpParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(MiniCSharpParser.Semicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MiniCSharpParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(MiniCSharpParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(MiniCSharpParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plusplus() { return GetToken(MiniCSharpParser.Plusplus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minusminus() { return GetToken(MiniCSharpParser.Minusminus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MiniCSharpParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MiniCSharpParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(MiniCSharpParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MiniCSharpParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(MiniCSharpParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MiniCSharpParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Read() { return GetToken(MiniCSharpParser.Read, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Write() { return GetToken(MiniCSharpParser.Write, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(MiniCSharpParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(MiniCSharpParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112;
				designator();
				State = 122;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Assign:
					{
					State = 113;
					Match(Assign);
					State = 114;
					expr();
					}
					break;
				case LeftParen:
					{
					State = 115;
					Match(LeftParen);
					State = 117;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 3940649808171078L) != 0) {
						{
						State = 116;
						actPars();
						}
					}

					State = 119;
					Match(RightParen);
					}
					break;
				case Plusplus:
					{
					State = 120;
					Match(Plusplus);
					}
					break;
				case Minusminus:
					{
					State = 121;
					Match(Minusminus);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 124;
				Match(Semicolon);
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				Match(If);
				State = 127;
				Match(LeftParen);
				State = 128;
				condition();
				State = 129;
				Match(RightParen);
				State = 130;
				statement();
				State = 133;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 131;
					Match(Else);
					State = 132;
					statement();
					}
					break;
				}
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 3);
				{
				State = 135;
				Match(For);
				State = 136;
				Match(LeftParen);
				State = 137;
				expr();
				State = 138;
				Match(Semicolon);
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 3940649808171078L) != 0) {
					{
					State = 139;
					condition();
					}
				}

				State = 142;
				Match(Semicolon);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 139088791339010L) != 0) {
					{
					State = 143;
					statement();
					}
				}

				State = 146;
				Match(RightParen);
				State = 147;
				statement();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 4);
				{
				State = 149;
				Match(While);
				State = 150;
				Match(LeftParen);
				State = 151;
				condition();
				State = 152;
				Match(RightParen);
				State = 153;
				statement();
				}
				break;
			case Break:
				EnterOuterAlt(_localctx, 5);
				{
				State = 155;
				Match(Break);
				State = 156;
				Match(Semicolon);
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 6);
				{
				State = 157;
				Match(Return);
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 3940649808171078L) != 0) {
					{
					State = 158;
					expr();
					}
				}

				State = 161;
				Match(Semicolon);
				}
				break;
			case Read:
				EnterOuterAlt(_localctx, 7);
				{
				State = 162;
				Match(Read);
				State = 163;
				Match(LeftParen);
				State = 164;
				designator();
				State = 165;
				Match(RightParen);
				State = 166;
				Match(Semicolon);
				}
				break;
			case Write:
				EnterOuterAlt(_localctx, 8);
				{
				State = 168;
				Match(Write);
				State = 169;
				Match(LeftParen);
				State = 170;
				expr();
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 171;
					Match(Comma);
					State = 172;
					Match(Number);
					}
				}

				State = 175;
				Match(RightParen);
				State = 176;
				Match(Semicolon);
				}
				break;
			case LeftBrack:
				EnterOuterAlt(_localctx, 9);
				{
				State = 178;
				block();
				}
				break;
			case Semicolon:
				EnterOuterAlt(_localctx, 10);
				{
				State = 179;
				Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrack() { return GetToken(MiniCSharpParser.LeftBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrack() { return GetToken(MiniCSharpParser.RightBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(LeftBrack);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 139088791339010L) != 0) {
				{
				State = 185;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 183;
					varDecl();
					}
					break;
				case 2:
					{
					State = 184;
					statement();
					}
					break;
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 190;
			Match(RightBrack);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MiniCSharpParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MiniCSharpParser.Comma, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterActPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitActPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 18, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			expr();
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 193;
				Match(Comma);
				State = 194;
				expr();
				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Or() { return GetTokens(MiniCSharpParser.Or); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or(int i) {
			return GetToken(MiniCSharpParser.Or, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			condTerm();
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Or) {
				{
				{
				State = 201;
				Match(Or);
				State = 202;
				condTerm();
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(MiniCSharpParser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(MiniCSharpParser.And, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCondTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCondTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 22, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			condFact();
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==And) {
				{
				{
				State = 209;
				Match(And);
				State = 210;
				condFact();
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelOpContext relOp() {
			return GetRuleContext<RelOpContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCondFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCondFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 24, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			expr();
			State = 217;
			relOp();
			State = 218;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(MiniCSharpParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(MiniCSharpParser.RightParen, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 26, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(LeftParen);
			State = 221;
			type();
			State = 222;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(MiniCSharpParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(MiniCSharpParser.Minus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Add() { return GetTokens(MiniCSharpParser.Add); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add(int i) {
			return GetToken(MiniCSharpParser.Add, i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Minus) {
				{
				State = 224;
				Match(Minus);
				}
			}

			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 227;
				cast();
				}
				break;
			}
			State = 230;
			term();
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Minus || _la==Add) {
				{
				State = 234;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Add:
					{
					State = 231;
					Match(Add);
					}
					break;
				case Minus:
					{
					State = 232;
					Match(Minus);
					State = 233;
					term();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mult() { return GetTokens(MiniCSharpParser.Mult); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mult(int i) {
			return GetToken(MiniCSharpParser.Mult, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Div() { return GetTokens(MiniCSharpParser.Div); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div(int i) {
			return GetToken(MiniCSharpParser.Div, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mod() { return GetTokens(MiniCSharpParser.Mod); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod(int i) {
			return GetToken(MiniCSharpParser.Mod, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 30, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			factor();
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0) {
				{
				State = 244;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Mult:
					{
					State = 240;
					Match(Mult);
					}
					break;
				case Div:
					{
					State = 241;
					Match(Div);
					}
					break;
				case Mod:
					{
					State = 242;
					Match(Mod);
					State = 243;
					factor();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(MiniCSharpParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(MiniCSharpParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(MiniCSharpParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharConst() { return GetToken(MiniCSharpParser.CharConst, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringConst() { return GetToken(MiniCSharpParser.StringConst, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(MiniCSharpParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(MiniCSharpParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(MiniCSharpParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 32, RULE_factor);
		int _la;
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				designator();
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LeftParen) {
					{
					State = 250;
					Match(LeftParen);
					State = 252;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 3940649808171078L) != 0) {
						{
						State = 251;
						actPars();
						}
					}

					State = 254;
					Match(RightParen);
					}
				}

				}
				break;
			case Number:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257;
				Match(Number);
				}
				break;
			case CharConst:
				EnterOuterAlt(_localctx, 3);
				{
				State = 258;
				Match(CharConst);
				}
				break;
			case StringConst:
				EnterOuterAlt(_localctx, 4);
				{
				State = 259;
				Match(StringConst);
				}
				break;
			case Bool:
				EnterOuterAlt(_localctx, 5);
				{
				State = 260;
				Match(Bool);
				}
				break;
			case New:
				EnterOuterAlt(_localctx, 6);
				{
				State = 261;
				Match(New);
				State = 262;
				Match(Id);
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 7);
				{
				State = 263;
				Match(LeftParen);
				State = 264;
				expr();
				State = 265;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(MiniCSharpParser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(MiniCSharpParser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MiniCSharpParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MiniCSharpParser.Dot, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftSBrack() { return GetTokens(MiniCSharpParser.LeftSBrack); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSBrack(int i) {
			return GetToken(MiniCSharpParser.LeftSBrack, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightSBrack() { return GetTokens(MiniCSharpParser.RightSBrack); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSBrack(int i) {
			return GetToken(MiniCSharpParser.RightSBrack, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			Match(Id);
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot || _la==LeftSBrack) {
				{
				State = 276;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Dot:
					{
					State = 270;
					Match(Dot);
					State = 271;
					Match(Id);
					}
					break;
				case LeftSBrack:
					{
					State = 272;
					Match(LeftSBrack);
					State = 273;
					expr();
					State = 274;
					Match(RightSBrack);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(MiniCSharpParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(MiniCSharpParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(MiniCSharpParser.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreateOrEquals() { return GetToken(MiniCSharpParser.GreateOrEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(MiniCSharpParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessOrEquals() { return GetToken(MiniCSharpParser.LessOrEquals, 0); }
		public RelOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterRelOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitRelOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelOpContext relOp() {
		RelOpContext _localctx = new RelOpContext(Context, State);
		EnterRule(_localctx, 36, RULE_relOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 16515072L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,51,284,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,5,0,40,8,0,10,0,12,0,43,9,
		0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,51,8,0,10,0,12,0,54,9,0,1,0,1,0,1,0,1,1,
		1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,67,8,2,10,2,12,2,70,9,2,1,2,1,2,1,3,1,
		3,1,3,1,3,5,3,78,8,3,10,3,12,3,81,9,3,1,3,1,3,1,4,1,4,3,4,87,8,4,1,4,1,
		4,1,4,3,4,92,8,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,5,5,103,8,5,10,5,
		12,5,106,9,5,1,6,1,6,1,6,3,6,111,8,6,1,7,1,7,1,7,1,7,1,7,3,7,118,8,7,1,
		7,1,7,1,7,3,7,123,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,134,8,7,
		1,7,1,7,1,7,1,7,1,7,3,7,141,8,7,1,7,1,7,3,7,145,8,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,160,8,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,3,7,174,8,7,1,7,1,7,1,7,1,7,1,7,3,7,181,8,7,1,
		8,1,8,1,8,5,8,186,8,8,10,8,12,8,189,9,8,1,8,1,8,1,9,1,9,1,9,5,9,196,8,
		9,10,9,12,9,199,9,9,1,10,1,10,1,10,5,10,204,8,10,10,10,12,10,207,9,10,
		1,11,1,11,1,11,5,11,212,8,11,10,11,12,11,215,9,11,1,12,1,12,1,12,1,12,
		1,13,1,13,1,13,1,13,1,14,3,14,226,8,14,1,14,3,14,229,8,14,1,14,1,14,1,
		14,1,14,5,14,235,8,14,10,14,12,14,238,9,14,1,15,1,15,1,15,1,15,1,15,5,
		15,245,8,15,10,15,12,15,248,9,15,1,16,1,16,1,16,3,16,253,8,16,1,16,3,16,
		256,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,268,8,
		16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,277,8,17,10,17,12,17,280,9,
		17,1,18,1,18,1,18,0,0,19,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,0,1,1,0,18,23,314,0,41,1,0,0,0,2,58,1,0,0,0,4,62,1,0,0,0,6,73,1,
		0,0,0,8,86,1,0,0,0,10,96,1,0,0,0,12,107,1,0,0,0,14,180,1,0,0,0,16,182,
		1,0,0,0,18,192,1,0,0,0,20,200,1,0,0,0,22,208,1,0,0,0,24,216,1,0,0,0,26,
		220,1,0,0,0,28,225,1,0,0,0,30,239,1,0,0,0,32,267,1,0,0,0,34,269,1,0,0,
		0,36,281,1,0,0,0,38,40,3,2,1,0,39,38,1,0,0,0,40,43,1,0,0,0,41,39,1,0,0,
		0,41,42,1,0,0,0,42,44,1,0,0,0,43,41,1,0,0,0,44,45,5,36,0,0,45,46,5,1,0,
		0,46,52,5,29,0,0,47,51,3,4,2,0,48,51,3,6,3,0,49,51,3,8,4,0,50,47,1,0,0,
		0,50,48,1,0,0,0,50,49,1,0,0,0,51,54,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,
		0,53,55,1,0,0,0,54,52,1,0,0,0,55,56,5,30,0,0,56,57,5,0,0,1,57,1,1,0,0,
		0,58,59,5,37,0,0,59,60,5,1,0,0,60,61,5,25,0,0,61,3,1,0,0,0,62,63,3,12,
		6,0,63,68,5,1,0,0,64,65,5,26,0,0,65,67,5,1,0,0,66,64,1,0,0,0,67,70,1,0,
		0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,71,1,0,0,0,70,68,1,0,0,0,71,72,5,25,
		0,0,72,5,1,0,0,0,73,74,5,36,0,0,74,75,5,1,0,0,75,79,5,29,0,0,76,78,3,4,
		2,0,77,76,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,82,1,0,
		0,0,81,79,1,0,0,0,82,83,5,30,0,0,83,7,1,0,0,0,84,87,3,12,6,0,85,87,5,38,
		0,0,86,84,1,0,0,0,86,85,1,0,0,0,87,88,1,0,0,0,88,89,5,1,0,0,89,91,5,27,
		0,0,90,92,3,10,5,0,91,90,1,0,0,0,91,92,1,0,0,0,92,93,1,0,0,0,93,94,5,28,
		0,0,94,95,3,16,8,0,95,9,1,0,0,0,96,97,3,12,6,0,97,104,5,1,0,0,98,99,5,
		26,0,0,99,100,3,12,6,0,100,101,5,1,0,0,101,103,1,0,0,0,102,98,1,0,0,0,
		103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,11,1,0,0,0,106,104,
		1,0,0,0,107,110,5,1,0,0,108,109,5,31,0,0,109,111,5,32,0,0,110,108,1,0,
		0,0,110,111,1,0,0,0,111,13,1,0,0,0,112,122,3,34,17,0,113,114,5,8,0,0,114,
		123,3,28,14,0,115,117,5,27,0,0,116,118,3,18,9,0,117,116,1,0,0,0,117,118,
		1,0,0,0,118,119,1,0,0,0,119,123,5,28,0,0,120,123,5,13,0,0,121,123,5,14,
		0,0,122,113,1,0,0,0,122,115,1,0,0,0,122,120,1,0,0,0,122,121,1,0,0,0,123,
		124,1,0,0,0,124,125,5,25,0,0,125,181,1,0,0,0,126,127,5,39,0,0,127,128,
		5,27,0,0,128,129,3,20,10,0,129,130,5,28,0,0,130,133,3,14,7,0,131,132,5,
		40,0,0,132,134,3,14,7,0,133,131,1,0,0,0,133,134,1,0,0,0,134,181,1,0,0,
		0,135,136,5,42,0,0,136,137,5,27,0,0,137,138,3,28,14,0,138,140,5,25,0,0,
		139,141,3,20,10,0,140,139,1,0,0,0,140,141,1,0,0,0,141,142,1,0,0,0,142,
		144,5,25,0,0,143,145,3,14,7,0,144,143,1,0,0,0,144,145,1,0,0,0,145,146,
		1,0,0,0,146,147,5,28,0,0,147,148,3,14,7,0,148,181,1,0,0,0,149,150,5,41,
		0,0,150,151,5,27,0,0,151,152,3,20,10,0,152,153,5,28,0,0,153,154,3,14,7,
		0,154,181,1,0,0,0,155,156,5,43,0,0,156,181,5,25,0,0,157,159,5,44,0,0,158,
		160,3,28,14,0,159,158,1,0,0,0,159,160,1,0,0,0,160,161,1,0,0,0,161,181,
		5,25,0,0,162,163,5,45,0,0,163,164,5,27,0,0,164,165,3,34,17,0,165,166,5,
		28,0,0,166,167,5,25,0,0,167,181,1,0,0,0,168,169,5,46,0,0,169,170,5,27,
		0,0,170,173,3,28,14,0,171,172,5,26,0,0,172,174,5,49,0,0,173,171,1,0,0,
		0,173,174,1,0,0,0,174,175,1,0,0,0,175,176,5,28,0,0,176,177,5,25,0,0,177,
		181,1,0,0,0,178,181,3,16,8,0,179,181,5,25,0,0,180,112,1,0,0,0,180,126,
		1,0,0,0,180,135,1,0,0,0,180,149,1,0,0,0,180,155,1,0,0,0,180,157,1,0,0,
		0,180,162,1,0,0,0,180,168,1,0,0,0,180,178,1,0,0,0,180,179,1,0,0,0,181,
		15,1,0,0,0,182,187,5,29,0,0,183,186,3,4,2,0,184,186,3,14,7,0,185,183,1,
		0,0,0,185,184,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,
		188,190,1,0,0,0,189,187,1,0,0,0,190,191,5,30,0,0,191,17,1,0,0,0,192,197,
		3,28,14,0,193,194,5,26,0,0,194,196,3,28,14,0,195,193,1,0,0,0,196,199,1,
		0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,19,1,0,0,0,199,197,1,0,0,0,200,
		205,3,22,11,0,201,202,5,10,0,0,202,204,3,22,11,0,203,201,1,0,0,0,204,207,
		1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,21,1,0,0,0,207,205,1,0,0,0,
		208,213,3,24,12,0,209,210,5,9,0,0,210,212,3,24,12,0,211,209,1,0,0,0,212,
		215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,23,1,0,0,0,215,213,1,0,
		0,0,216,217,3,28,14,0,217,218,3,36,18,0,218,219,3,28,14,0,219,25,1,0,0,
		0,220,221,5,27,0,0,221,222,3,12,6,0,222,223,5,28,0,0,223,27,1,0,0,0,224,
		226,5,12,0,0,225,224,1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,229,3,
		26,13,0,228,227,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,236,3,30,15,
		0,231,235,5,34,0,0,232,233,5,12,0,0,233,235,3,30,15,0,234,231,1,0,0,0,
		234,232,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,29,
		1,0,0,0,238,236,1,0,0,0,239,246,3,32,16,0,240,245,5,15,0,0,241,245,5,16,
		0,0,242,243,5,17,0,0,243,245,3,32,16,0,244,240,1,0,0,0,244,241,1,0,0,0,
		244,242,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,31,
		1,0,0,0,248,246,1,0,0,0,249,255,3,34,17,0,250,252,5,27,0,0,251,253,3,18,
		9,0,252,251,1,0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,256,5,28,0,0,255,
		250,1,0,0,0,255,256,1,0,0,0,256,268,1,0,0,0,257,268,5,49,0,0,258,268,5,
		6,0,0,259,268,5,50,0,0,260,268,5,2,0,0,261,262,5,51,0,0,262,268,5,1,0,
		0,263,264,5,27,0,0,264,265,3,28,14,0,265,266,5,28,0,0,266,268,1,0,0,0,
		267,249,1,0,0,0,267,257,1,0,0,0,267,258,1,0,0,0,267,259,1,0,0,0,267,260,
		1,0,0,0,267,261,1,0,0,0,267,263,1,0,0,0,268,33,1,0,0,0,269,278,5,1,0,0,
		270,271,5,24,0,0,271,277,5,1,0,0,272,273,5,31,0,0,273,274,3,28,14,0,274,
		275,5,32,0,0,275,277,1,0,0,0,276,270,1,0,0,0,276,272,1,0,0,0,277,280,1,
		0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,35,1,0,0,0,280,278,1,0,0,0,281,
		282,7,0,0,0,282,37,1,0,0,0,33,41,50,52,68,79,86,91,104,110,117,122,133,
		140,144,159,173,180,185,187,197,205,213,225,228,234,236,244,246,252,255,
		267,276,278
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace gen

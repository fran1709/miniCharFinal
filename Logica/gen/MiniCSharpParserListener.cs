//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Mariana Artavia Vene/Documents/I SEMESTRE 2023/Compiladores e Interpretes/ConsoleCompi/ConsoleCompi/src\MiniCSharpParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace gen {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MiniCSharpParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public interface IMiniCSharpParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] MiniCSharpParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] MiniCSharpParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.using"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUsing([NotNull] MiniCSharpParser.UsingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.using"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUsing([NotNull] MiniCSharpParser.UsingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDecl([NotNull] MiniCSharpParser.VarDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDecl([NotNull] MiniCSharpParser.VarDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassDecl([NotNull] MiniCSharpParser.ClassDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassDecl([NotNull] MiniCSharpParser.ClassDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodDecl([NotNull] MiniCSharpParser.MethodDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodDecl([NotNull] MiniCSharpParser.MethodDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.formPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormPars([NotNull] MiniCSharpParser.FormParsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.formPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormPars([NotNull] MiniCSharpParser.FormParsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] MiniCSharpParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] MiniCSharpParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] MiniCSharpParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] MiniCSharpParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] MiniCSharpParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] MiniCSharpParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.actPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterActPars([NotNull] MiniCSharpParser.ActParsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.actPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitActPars([NotNull] MiniCSharpParser.ActParsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondition([NotNull] MiniCSharpParser.ConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondition([NotNull] MiniCSharpParser.ConditionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.condTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondTerm([NotNull] MiniCSharpParser.CondTermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.condTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondTerm([NotNull] MiniCSharpParser.CondTermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.condFact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondFact([NotNull] MiniCSharpParser.CondFactContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.condFact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondFact([NotNull] MiniCSharpParser.CondFactContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.cast"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCast([NotNull] MiniCSharpParser.CastContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.cast"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCast([NotNull] MiniCSharpParser.CastContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] MiniCSharpParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] MiniCSharpParser.ExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm([NotNull] MiniCSharpParser.TermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm([NotNull] MiniCSharpParser.TermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactor([NotNull] MiniCSharpParser.FactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactor([NotNull] MiniCSharpParser.FactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.designator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDesignator([NotNull] MiniCSharpParser.DesignatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.designator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDesignator([NotNull] MiniCSharpParser.DesignatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.relOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelOp([NotNull] MiniCSharpParser.RelOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.relOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelOp([NotNull] MiniCSharpParser.RelOpContext context);
}
} // namespace gen
